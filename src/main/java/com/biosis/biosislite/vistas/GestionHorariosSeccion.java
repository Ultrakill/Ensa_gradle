/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.biosislite.vistas;

import com.biosis.biosislite.controladores.ConceptoControlador;
import com.biosis.biosislite.controladores.Controlador;
import com.biosis.biosislite.controladores.EmpleadoControlador;
import com.biosis.biosislite.controladores.GradoControlador;
import com.biosis.biosislite.controladores.NivelControlador;
import com.biosis.biosislite.controladores.SeccionControlador;
import com.biosis.biosislite.entidades.educativo.AsignacionNGS;
import com.biosis.biosislite.entidades.educativo.Grado;
import com.biosis.biosislite.entidades.educativo.Nivel;
import com.biosis.biosislite.entidades.educativo.Seccion;
import com.biosis.biosislite.entidades.educativo.SeccionHorario;
import com.biosis.biosislite.entidades.escalafon.Empleado;
import com.biosis.biosislite.vistas.dialogos.DlgAsignacionSeccionHorario;
import com.biosis.biosislite.vistas.modelos.MTSeccionHorario;
import com.biosis.biosislite.vistas.render.RenderNivelGradoSeccion;
import java.util.ArrayList;
import java.util.List;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author Aldo
 */
public class GestionHorariosSeccion extends javax.swing.JInternalFrame {

    /**
     * Creates new form GestionHorariosSeccion
     */
    private List<Empleado> listaAlumnos;
    private List<SeccionHorario> listaSeccionHorario;
    
    //Controladores
    private EmpleadoControlador ec;
    private NivelControlador nc;
    private GradoControlador gc;
    private SeccionControlador sc;
    private final ConceptoControlador cptc = ConceptoControlador.getInstance();
    public GestionHorariosSeccion() {
        initComponents();
        inicializar();
        bind();
        bindArbol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        popOpciones = new javax.swing.JPopupMenu();
        mnuAsignarHorarioSeccion = new javax.swing.JMenuItem();
        pnlContenedor = new javax.swing.JPanel();
        pnlSecciones = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeNGS = new javax.swing.JTree();
        pnlAsignaciones = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAsignacionesHorario = new org.jdesktop.swingx.JXTable();

        mnuAsignarHorarioSeccion.setText("Asignar Horario");
        mnuAsignarHorarioSeccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAsignarHorarioSeccionActionPerformed(evt);
            }
        });
        popOpciones.add(mnuAsignarHorarioSeccion);

        setClosable(true);
        setResizable(true);
        setTitle("Gesti√≥n de Horarios de Secciones");

        pnlContenedor.setLayout(new java.awt.GridBagLayout());

        pnlSecciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Secciones"));
        pnlSecciones.setLayout(new java.awt.GridBagLayout());

        treeNGS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeNGSMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(treeNGS);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlSecciones.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        pnlContenedor.add(pnlSecciones, gridBagConstraints);

        pnlAsignaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Asignaciones de Horarios"));
        pnlAsignaciones.setLayout(new java.awt.GridBagLayout());

        tblAsignacionesHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblAsignacionesHorario);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAsignaciones.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        pnlContenedor.add(pnlAsignaciones, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContenedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 783, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuAsignarHorarioSeccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAsignarHorarioSeccionActionPerformed
        // TODO add your handling code here:              
        DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) treeNGS.getLastSelectedPathComponent();
        if (nodo != null) {
            Object elemento = nodo.getUserObject();
            if (elemento instanceof Seccion) {
                DlgAsignacionSeccionHorario dlgSH = new DlgAsignacionSeccionHorario(this,(Seccion)elemento,Controlador.NUEVO);
                dlgSH.setVisible(true);
            }
        }
    }//GEN-LAST:event_mnuAsignarHorarioSeccionActionPerformed

    private void treeNGSMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeNGSMouseReleased
        // TODO add your handling code here:
        DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) treeNGS.getLastSelectedPathComponent();
        if (nodo != null) {
            Object elemento = nodo.getUserObject();
            if (elemento instanceof Seccion) {
                mostrar((Seccion) elemento);
            }
        }
    }//GEN-LAST:event_treeNGSMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnuAsignarHorarioSeccion;
    private javax.swing.JPanel pnlAsignaciones;
    private javax.swing.JPanel pnlContenedor;
    private javax.swing.JPanel pnlSecciones;
    private javax.swing.JPopupMenu popOpciones;
    private org.jdesktop.swingx.JXTable tblAsignacionesHorario;
    private javax.swing.JTree treeNGS;
    // End of variables declaration//GEN-END:variables
    private void inicializar(){
        ec = new EmpleadoControlador();
        nc = new NivelControlador();
        gc = new GradoControlador();
        sc = new SeccionControlador();
    }
    
    private void bind(){
        listaSeccionHorario = ObservableCollections.observableList(new ArrayList<SeccionHorario>());
        String [] columnasIntegrantes = {"Fecha Inicio","Fecha Fin","Horario","Seccion"};
        MTSeccionHorario mtIntegrantes = new MTSeccionHorario(listaSeccionHorario,columnasIntegrantes);
        tblAsignacionesHorario.setModel(mtIntegrantes);
        //tblEmpleado.setComponentPopupMenu(popOpciones);
        
       
    }
    private TreeModel modeloNGS;
    private TreeCellRenderer renderNGS;
    private void bindArbol(){
        TreeNode nodoPrincipal = new DefaultMutableTreeNode("Nivel - Grados - Secciones");
        modeloNGS = new DefaultTreeModel(nodoPrincipal);
        renderNGS = new RenderNivelGradoSeccion();
        treeNGS.setModel(modeloNGS);
        treeNGS.setCellRenderer(renderNGS);
        
        List<Nivel> nivelList = nc.buscarTodos();
//        List<Concepto> ngs = cptc.buscarXPrefijo(1);
//        cptc.buscarXPrefijo(2).stream().forEach((c) -> {
//           ngs.add(c);
//        });
//
//        ngs.stream().forEach((c) -> {
//            System.out.println("Concepto: "+c.getDescripcion()+" "+c.getId().getPrefijo()+" "+c.getId().getCorrelativo());
//        });
        llenarArbol((DefaultTreeModel)modeloNGS,nivelList,(DefaultMutableTreeNode) nodoPrincipal);
        for (int i = 0; i < treeNGS.getRowCount(); i++) {
            treeNGS.expandRow(i);
        }
        treeNGS.setComponentPopupMenu(popOpciones);
    }
    private void llenarArbol(DefaultTreeModel modelo, List listado, DefaultMutableTreeNode padre){
        for(Object elemento:listado){
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento);
            modelo.insertNodeInto(nodo, padre, padre.getChildCount());
            if(elemento instanceof Nivel){
                List<Grado> grados = ((Nivel) elemento).getGradoList();
                if(!grados.isEmpty()){
                    llenarArbol(modelo, grados, nodo);
                } 
            }else if(elemento instanceof Grado){
                List<Seccion> secciones = ((Grado) elemento).getSeccionList();
                if(!secciones.isEmpty()){
                    llenarArbol(modelo, secciones, nodo);
                } 
            } 
//            if(elemento instanceof Concepto){
//                
//                if(((Concepto)elemento).getId().getPrefijo()==1){
//                    List<Concepto> ngs = cptc.buscarXPrefijo(2);
//                    if(!ngs.isEmpty()){
//                        llenarArbol(modelo, ngs, nodo);
//                    }               
////                    if(ngs.isEmpty()){
////                        List<Concepto> ngs = ((Concepto) elemento).();
////                        llenarArbol(modelo,ngs,nodo);
////                    }
//                }else if(((Concepto)elemento).getId().getPrefijo()==2){
//                    List<Concepto> ngs = cptc.buscarXPrefijo(3);
//                    if(!ngs.isEmpty()){
//                        llenarArbol(modelo, ngs, nodo);
//                    }               
////                    if(ngs.isEmpty()){
////                        List<EmpleadoBiostar> empleadosBio = ((Departamento) elemento).getEmpleadoList();
////                        llenarArbol(modelo,empleadosBio,nodo);
////                    }
//                }
//            }
        }
    }
    
    private void mostrar(Seccion seccion){
        List<SeccionHorario> asignacionSeccionHorario = seccion.getSeccionHorarioList();
        listaSeccionHorario.clear();
        listaSeccionHorario.addAll(asignacionSeccionHorario);
        tblAsignacionesHorario.packAll();
    }
}
