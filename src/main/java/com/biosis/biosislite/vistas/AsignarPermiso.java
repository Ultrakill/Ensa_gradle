/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.biosislite.vistas;

import com.biosis.biosislite.Main;
import com.biosis.biosislite.controladores.AsignacionPermisoControlador;
import com.biosis.biosislite.controladores.Controlador;
import com.biosis.biosislite.controladores.EmpleadoControlador;
import com.biosis.biosislite.controladores.PermisoControlador;
import com.biosis.biosislite.controladores.TCAnalisisControlador;
import com.biosis.biosislite.entidades.AsignacionPermiso;
import com.biosis.biosislite.entidades.Permiso;
import com.biosis.biosislite.entidades.TipoPermiso;
import com.biosis.biosislite.entidades.escalafon.Empleado;
import com.biosis.biosislite.utiles.UsuarioActivo;
import com.biosis.biosislite.vistas.dialogos.DlgEmpleado;
import com.biosis.biosislite.vistas.dialogos.DlgPermisoCRU;
import com.biosis.biosislite.vistas.dialogos.DlgTipoPermiso;
import com.biosis.biosislite.vistas.modelos.MTAsignacionPermiso;
import com.biosis.biosislite.vistas.modelos.MTEmpleado;
import com.personal.utiles.FechaUtil;
import com.personal.utiles.FormularioUtil;
import com.personal.utiles.ReporteUtil;
import java.io.File;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author fesquivelc
 */
public class AsignarPermiso extends javax.swing.JInternalFrame {

    /**
     * Creates new form CRUDPeriodo
     */
    private List<AsignacionPermiso> listado;
    private List<Empleado> integrantes;
    private PermisoControlador controlador;
    private EmpleadoControlador ec;
    private int accion;
    private TipoPermiso tipoSeleccionado;
    private Empleado empleadoSeleccionado;
    private AsignacionPermisoControlador ac;
    private final ReporteUtil reporteador;
    private DlgPermisoCRU dlgPermisoCRU;

    public AsignarPermiso() {
        initComponents();
        this.dcFechaInicioBusqueda.setDate(new Date());
        this.dcFechaFinBusqueda.setDate(new Date());
        inicializar();
        bindeoSalvaje();
        reporteador = new ReporteUtil();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlListado = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new org.jdesktop.swingx.JXTable();
        pnlNavegacion = new javax.swing.JPanel();
        btnPrimero = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        spPagina = new javax.swing.JSpinner();
        txtTotal = new javax.swing.JTextField();
        btnSiguiente = new javax.swing.JButton();
        btnUltimo = new javax.swing.JButton();
        cboTamanio = new javax.swing.JComboBox();
        pnlBusqueda = new javax.swing.JPanel();
        dcFechaInicioBusqueda = new com.toedter.calendar.JDateChooser();
        dcFechaFinBusqueda = new com.toedter.calendar.JDateChooser();
        txtEmpleado = new javax.swing.JTextField();
        lblBusqueda = new org.jdesktop.swingx.JXBusyLabel();
        btnLimpiar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setTitle("ASIGNAR PERMISO A EMPLEADO(S)");
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        pnlListado.setBorder(javax.swing.BorderFactory.createTitledBorder("Permisos"));
        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0};
        pnlListado.setLayout(jPanel1Layout);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Add_24x24.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevo);

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Edit_24x24.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel3.add(btnModificar);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Information_24x24.png"))); // NOI18N
        jButton1.setText("Ver informaci√≥n");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Delete_24x24.png"))); // NOI18N
        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Print_24x24.png"))); // NOI18N
        jButton2.setText("Imprimir boleta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        pnlListado.add(jPanel3, gridBagConstraints);

        tblTabla.setHorizontalScrollEnabled(true);
        jScrollPane1.setViewportView(tblTabla);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        pnlListado.add(jScrollPane1, gridBagConstraints);

        pnlNavegacion.setLayout(new java.awt.GridLayout(1, 0, 2, 0));

        btnPrimero.setText("<<");
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnPrimero);

        btnAnterior.setText("<");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnAnterior);

        spPagina.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spPagina.setMinimumSize(new java.awt.Dimension(60, 20));
        spPagina.setPreferredSize(new java.awt.Dimension(60, 20));
        spPagina.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spPaginaStateChanged(evt);
            }
        });
        pnlNavegacion.add(spPagina);

        txtTotal.setEditable(false);
        txtTotal.setColumns(3);
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("1");
        pnlNavegacion.add(txtTotal);

        btnSiguiente.setText(">");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnSiguiente);

        btnUltimo.setText(">>");
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnUltimo);

        cboTamanio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25", "40", "50" }));
        cboTamanio.setMinimumSize(new java.awt.Dimension(53, 24));
        cboTamanio.setPreferredSize(new java.awt.Dimension(53, 24));
        cboTamanio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTamanioActionPerformed(evt);
            }
        });
        pnlNavegacion.add(cboTamanio);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        pnlListado.add(pnlNavegacion, gridBagConstraints);

        java.awt.GridBagLayout pnlBusquedaLayout = new java.awt.GridBagLayout();
        pnlBusquedaLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        pnlBusquedaLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        pnlBusqueda.setLayout(pnlBusquedaLayout);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        pnlBusqueda.add(dcFechaInicioBusqueda, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        pnlBusqueda.add(dcFechaFinBusqueda, gridBagConstraints);

        txtEmpleado.setEditable(false);
        txtEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpleadoActionPerformed(evt);
            }
        });
        txtEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpleadoKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnlBusqueda.add(txtEmpleado, gridBagConstraints);

        lblBusqueda.setText("Empleado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlBusqueda.add(lblBusqueda, gridBagConstraints);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlBusqueda.add(btnLimpiar, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/User_16x16.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlBusqueda.add(jButton4, gridBagConstraints);

        jLabel9.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlBusqueda.add(jLabel9, gridBagConstraints);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Find_16x16.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlBusqueda.add(btnBuscar, gridBagConstraints);

        jLabel5.setText("Fechas:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlBusqueda.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnlListado.add(pnlBusqueda, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlListado, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        this.accion = Controlador.NUEVO;
        controlador.prepararCrear();
        dlgPermisoCRU = new DlgPermisoCRU(this, controlador.getSeleccionado(), accion);
        dlgPermisoCRU.setVisible(true);
        if (dlgPermisoCRU.isAccionRealizada()) {
            Permiso permiso = dlgPermisoCRU.getPermiso();
            if (permiso != null) {
                busqueda(permiso);
            }
        }

//        this.controles(accion);
//        integrantes.clear();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            this.accion = Controlador.MODIFICAR;
            tipoSeleccionado = this.listado.get(fila).getPermiso().getTipoPermiso();
            controlador.setSeleccionado(this.listado.get(fila).getPermiso());

            dlgPermisoCRU = new DlgPermisoCRU(this, controlador.getSeleccionado(), accion);
            dlgPermisoCRU.setVisible(true);

            if (dlgPermisoCRU.isAccionRealizada()) {
                Permiso permiso = dlgPermisoCRU.getPermiso();
                if (permiso != null) {
                    busqueda(permiso);
                }
            }
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpleadoKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            lblBusqueda.setBusy(true);
            buscar();
            lblBusqueda.setBusy(false);
        }
    }//GEN-LAST:event_txtEmpleadoKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DlgEmpleado dialogo = new DlgEmpleado(this);
        dialogo.setAgregar(false);
        this.empleadoSeleccionado = dialogo.getSeleccionado();
        if (this.empleadoSeleccionado != null) {
            this.txtEmpleado.setText(
                    empleadoSeleccionado.getNroDocumento()
                    + " " + empleadoSeleccionado.getPaterno()
                    + " " + empleadoSeleccionado.getMaterno()
                    + " " + empleadoSeleccionado.getNombre());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        FormularioUtil.limpiarComponente(this.txtEmpleado);
        this.empleadoSeleccionado = null;
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        busqueda();

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        // TODO add your handling code here:
        primero();
    }//GEN-LAST:event_btnPrimeroActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        anterior();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void spPaginaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spPaginaStateChanged
        // TODO add your handling code here:
        this.seleccionPagina();
    }//GEN-LAST:event_spPaginaStateChanged

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed
        // TODO add your handling code here:
        ultimo();
    }//GEN-LAST:event_btnUltimoActionPerformed

    private void cboTamanioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTamanioActionPerformed
        // TODO add your handling code here:
        this.paginaActual = 1;
        buscar();
        this.actualizarControlesNavegacion();
    }//GEN-LAST:event_cboTamanioActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int fila = this.tblTabla.getSelectedRow();
        if (fila != -1) {
//            List<AsignacionPermiso> lista = new ArrayList<>();
            AsignacionPermiso asignacion = this.listado.get(fila);
//            lista.add(asignacion);admin   
            imprimirBoleta(asignacion);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpleadoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int fila;

        if ((fila = tblTabla.getSelectedRow()) != -1) {
            accion = Controlador.ELIMINAR;
            if (FormularioUtil.dialogoConfirmar(this, accion)) {
                controlador.setSeleccionado(this.listado.get(fila).getPermiso());
                if (controlador.accion(accion)) {
                    FormularioUtil.mensajeExito(this, accion);
                    accion = 0;
                    this.integrantes.clear();
//                    this.controles(accion);
                    this.actualizarTabla();
                }

            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            this.accion = Controlador.LEER;
            tipoSeleccionado = this.listado.get(fila).getPermiso().getTipoPermiso();

            dlgPermisoCRU = new DlgPermisoCRU(this, this.listado.get(fila).getPermiso(), accion);
            dlgPermisoCRU.setVisible(true);

            if (dlgPermisoCRU.isAccionRealizada()) {
                Permiso permiso = dlgPermisoCRU.getPermiso();
                if (permiso != null) {
                    busqueda(permiso);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.JComboBox cboTamanio;
    private com.toedter.calendar.JDateChooser dcFechaFinBusqueda;
    private com.toedter.calendar.JDateChooser dcFechaInicioBusqueda;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXBusyLabel lblBusqueda;
    private javax.swing.JPanel pnlBusqueda;
    private javax.swing.JPanel pnlListado;
    private javax.swing.JPanel pnlNavegacion;
    private javax.swing.JSpinner spPagina;
    private org.jdesktop.swingx.JXTable tblTabla;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

//    private void mostrar(Permiso permiso) {
//        txtMotivo.setText(permiso.getMotivo());
//        txtTipoPermiso.setText(permiso.getTipoPermiso().getNombre());
//        this.radFecha.setSelected(permiso.isPorFecha());
//        dcFechaInicio.setDate(permiso.getFechaInicio());
//        txtDocumento.setText(permiso.getDocumento());
//        if (permiso.isPorFecha()) {
//            Calendar cal = Calendar.getInstance();
//            cal.set(Calendar.HOUR_OF_DAY, 0);
//            cal.set(Calendar.MINUTE, 0);
//            cal.set(Calendar.SECOND, 0);
//            dcFechaFin.setDate(permiso.getFechaFin());
//            spHoraInicio.setValue(cal.getTime());
//            spHoraFin.setValue(cal.getTime());
//        } else {
//            dcFechaFin.setDate(permiso.getFechaInicio());
//            spHoraInicio.setValue(permiso.getHoraInicio());
//            spHoraFin.setValue(permiso.getHoraFin());
//        }
//
//        List<Empleado> empleados = obtenerListadoDNI(permiso.getAsignacionPermisoList());
//        if (!empleados.isEmpty()) {
//            mostrarIntegrantes(empleados);
//        }
//
//    }
    private void bindeoSalvaje() {
        listado = new ArrayList<>();
        listado = ObservableCollections.observableList(listado);

        integrantes = ObservableCollections.observableList(new ArrayList<Empleado>());

        String[] columnasIntegrantes = {"Nro Documento", "Empleado"};

        MTAsignacionPermiso mt = new MTAsignacionPermiso(listado);
        MTEmpleado mtIntegrantes = new MTEmpleado(integrantes, columnasIntegrantes);
        tblTabla.setModel(mt);
//        tblEmpleados.setModel(mtIntegrantes);

        actualizarTabla();
    }

    private void actualizarTabla() {
        listado.clear();
        empleadoSeleccionado = null;
        FormularioUtil.limpiarComponente(txtEmpleado);
        paginaActual = 1;
        buscar();
        actualizarControlesNavegacion();
        tblTabla.packAll();
    }

    private void mostrarIntegrantes(List<Empleado> empleados) {
        integrantes.clear();
        integrantes.addAll(empleados);
//        tblEmpleados.packAll();
    }

    private void inicializar() {
        this.accion = 0;

        controlador = new PermisoControlador();
        ec = new EmpleadoControlador();
        ac = new AsignacionPermisoControlador();
//        FormularioUtil.modeloSpinnerFechaHora(spFechaInicio, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(spFechaFin, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(spHoraInicio, "HH:mm");
//        FormularioUtil.modeloSpinnerFechaHora(spHoraFin, "HH:mm");
//        this.controles(accion);
    }

//    private void controles(int accion) {
//        boolean bandera = accion == Controlador.NUEVO || accion == Controlador.MODIFICAR;
//
//        FormularioUtil.activarComponente(this.pnlListado, !bandera);
////        FormularioUtil.activarComponente(this.pnlDatos, bandera);
//        FormularioUtil.activarComponente(this.txtEmpleado, false);
////        FormularioUtil.activarComponente(this.btnImprimirTodo, false);
//
//        if (accion != Controlador.MODIFICAR) {
//            FormularioUtil.limpiarComponente(this.pnlDatos);
//        }
//
//        this.txtTipoPermiso.setEditable(false);
//        checkPorFecha(accion);
//    }
    private List<Empleado> obtenerListadoDNI(List<AsignacionPermiso> detalles) {
        List<Empleado> empleados = new ArrayList<>();
        for (AsignacionPermiso detalle : detalles) {
            empleados.add(detalle.getEmpleado());
        }
        return empleados;
    }

    public void agregarEmpleado(Empleado empleado) {
        integrantes.add(empleado);

        AsignacionPermiso detalle = new AsignacionPermiso();
        detalle.setEmpleado(empleado);
        detalle.setPermiso(controlador.getSeleccionado());

        controlador.getSeleccionado().getAsignacionPermisoList().add(detalle);
    }

    private void quitarEmpleado(int fila) {
        integrantes.remove(fila);
        controlador.getSeleccionado().getAsignacionPermisoList().remove(fila);
    }

    private int paginaActual = 1;
    private int totalPaginas = 0;
    private int tamanioPagina = 0;

    private void buscar() {
        String busqueda = txtEmpleado.getText();
        tamanioPagina = Integer.parseInt(cboTamanio.getSelectedItem().toString());

        Date fechaInicio = dcFechaInicioBusqueda.getDate();
        Date fechaFin = dcFechaFinBusqueda.getDate();
        listado.clear();
        List<AsignacionPermiso> lista = this.listar(empleadoSeleccionado, fechaInicio, fechaFin, paginaActual, tamanioPagina);
        System.out.println("LISTA: " + lista.size());
        listado.addAll(lista);

        tblTabla.packAll();
    }

    private void buscar(Permiso permiso) {
        tamanioPagina = Integer.parseInt(cboTamanio.getSelectedItem().toString());
        listado.clear();
//        permiso.getAsignacionPermisoList().stream().forEach(asig -> System.out.println(String.format("finicio: %s, ffin: %s", asig.getPermiso().getFechaInicio(), asig.getPermiso().getFechaFin())));
        listado.addAll(permiso.getAsignacionPermisoList());
        totalPaginas = 1;
        tblTabla.packAll();
    }

    private List<AsignacionPermiso> listar(Empleado empleado, Date fechaInicio, Date fechaFin, int pagina, int tamanio) {
        int total;

        if (empleado == null) {
            total = ac.contarXFecha(fechaInicio, fechaFin);
        } else {
            total = ac.contarXEmpleadoXFecha(empleado, fechaInicio, fechaFin);
        }

        if (total % tamanio == 0) {
            totalPaginas = total / tamanio;
        } else {
            totalPaginas = (total / tamanio) + 1;
        }

        if (totalPaginas == 0) {
            totalPaginas = 1;
        }

        if (empleado == null) {
            return ac.buscarXFecha(fechaInicio, fechaFin, (pagina - 1) * tamanio, tamanio);
        } else {
            return ac.buscarXEmpleadoXFecha(empleado, fechaInicio, fechaFin, (pagina - 1) * tamanio, tamanio);
        }

    }

    private void siguiente() {
        paginaActual++;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void ultimo() {
        paginaActual = totalPaginas;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void primero() {
        paginaActual = 1;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void anterior() {
        paginaActual--;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void seleccionPagina() {
        paginaActual = (int) spPagina.getValue();
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void actualizarControlesNavegacion() {
        spPagina.setValue(paginaActual);
        txtTotal.setText(totalPaginas + "");

        SpinnerNumberModel modeloSP = (SpinnerNumberModel) spPagina.getModel();
        Comparable<Integer> maximo = totalPaginas;
        modeloSP.setMaximum(maximo);

        this.btnSiguiente.setEnabled(paginaActual != totalPaginas);
        this.btnUltimo.setEnabled(paginaActual != totalPaginas);

        this.btnAnterior.setEnabled(paginaActual != 1);
        this.btnPrimero.setEnabled(paginaActual != 1);
    }
    private final DateFormat dfFecha = new SimpleDateFormat("dd/MM/yyyy");
    private final DateFormat dfHora = new SimpleDateFormat("HH:mm");

    private void imprimirBoleta(Permiso seleccionada) {
        File reporte = new File("reportes/reporte_papeleta_salida.jasper");
//        List<Long> lista = new ArrayList<>();

        Map<String, Object> parametros = new HashMap<>();
        parametros.put("permiso_id", seleccionada.getId());
        parametros.put("por_lote", true);
        parametros.put("reporte_ususario", UsuarioActivo.getUsuario().getLogin());
        parametros.put("reporte_institucion", Main.REPORTE_INSTITUCION);

        reporteador.setConn(controlador.getDao().getConexion());
        reporteador.generarReporte(reporte, parametros, JOptionPane.getFrameForComponent(this));

    }

    private void imprimirBoleta(AsignacionPermiso seleccionada) {

        File reporte = Main.FICHERO_REPORTE_SALIDA;
//        List<Long> lista = new ArrayList<>();

        Map<String, Object> parametros = new HashMap<>();
        parametros.put("permiso_id", seleccionada.getPermiso().getId());
        parametros.put("pers_nro_documento", seleccionada.getEmpleado().getNroDocumento());
        parametros.put("por_lote", false);
        parametros.put("reporte_ususario", UsuarioActivo.getUsuario().getLogin());
        parametros.put("reporte_institucion", Main.REPORTE_INSTITUCION);

        reporteador.setConn(controlador.getDao().getConexion());
        reporteador.generarReporte(reporte, parametros, JOptionPane.getFrameForComponent(this));

    }

    private final TCAnalisisControlador tcac = new TCAnalisisControlador();

    private void retrocederTiempo(List<String> empleados, Date fechaInicio) {
        tcac.retrocederTiempo(empleados, fechaInicio);
    }

//    private void checkPorFecha(int accion) {
//        if (accion != 0) {
//            FormularioUtil.activarComponente(dcFechaInicio, true);
//            FormularioUtil.activarComponente(dcFechaFin, radFecha.isSelected());
//
//            spHoraInicio.setEnabled(!radFecha.isSelected());
//            spHoraFin.setEnabled(!radFecha.isSelected());
//        }
//    }
//    private boolean erroresFormulario() {
//        int errores = 0;
//        Date fechaInicio = dcFechaInicio.getDate();
//
//        String mensaje = "";
//        if (integrantes.isEmpty()) {
//            errores++;
//            mensaje += ">Debe seleccionar uno o mas empleados\n";
//        }
//        if (radFecha.isSelected()) {
//            Date fechaFin = dcFechaFin.getDate();
//            if (fechaInicio.compareTo(fechaFin) > 0) {
//                errores++;
//                mensaje += ">La fecha de inicio debe ser menor que la fecha de fin\n";
//            }
//            //Traemos los dnis de los empleados
//            Permiso paraComprobar = this.controlador.getSeleccionado();
//            //List<String> dnis = new ArrayList<>();
//            for (AsignacionPermiso asignacion : paraComprobar.getAsignacionPermisoList()) {
//                //dnis.add(asignacion.getEmpleado());
//                System.out.println(asignacion.getEmpleado());
////                List<AsignacionPermiso> lista = ac.buscarXFechaDni(asignacion.getEmpleado(), fechaInicio);
//                int conteoPorFecha = ac.contarXEmpleadoEntreFechaPorFecha(empleadoSeleccionado, fechaInicio, fechaFin);
//                if (conteoPorFecha == 0) {
//
//                } else if (accion != Controlador.MODIFICAR) {
//                    errores++;
//                    mensaje += "El empleado " + asignacion.getEmpleado() + " tiene conflicto con un permiso a√±adido anteriormente \n Ingrese otro rango de fechas \n";
//                    break;
//                }
//            }
//        }
//
//        //Traemos los permisos por dni
//        if (radHora.isSelected()) {
//            Date horaInicio = (Date) spHoraInicio.getValue();
//            Date horaFin = (Date) spHoraFin.getValue();
//            if (horaInicio.compareTo(horaFin) > 0) {
//                errores++;
//                mensaje += ">La hora de inicio debe ser menor que la hora de fin \n";
//            }
//            Permiso paraComprobar = this.controlador.getSeleccionado();
//            for (AsignacionPermiso asignacion : paraComprobar.getAsignacionPermisoList()) {
//                List<AsignacionPermiso> lista = ac.buscarXHora(asignacion.getEmpleado(), fechaInicio);
//
//                Long conteoPorHora = lista.stream().filter(perm -> (horaInicio.compareTo(perm.getPermiso().getHoraInicio()) <= 0 && horaFin.compareTo(perm.getPermiso().getHoraInicio()) >= 0)
//                        || (perm.getPermiso().getHoraInicio().compareTo(horaInicio) <= 0 && perm.getPermiso().getHoraFin().compareTo(horaInicio) >= 0)).count();
//                if (conteoPorHora.intValue() == 0) {
//
//                } else {
//                    errores++;
//                    mensaje += ">El empleado " + asignacion.getEmpleado() + " tiene conflicto con un permiso a√±adido anteriormente \n Ingrese otro rango de horas\n";
//                    break;
//                }
//            }
//        }
//        if (errores > 0) {
//            JOptionPane.showMessageDialog(this, "Se ha(n) encontrado el(los) siguiente(s) error(es):\n" + mensaje, "Mensaje del sistema", JOptionPane.ERROR_MESSAGE);
//        }
//        return errores != 0;
//    }
//    private void mostrarRecord(Empleado empleado) {
//        Calendar cal = Calendar.getInstance();
//        cal.setTime(empleado.getContratoList().get(0).getFechaInicio());
//
//        Date fInicio = dcFechaInicio.getDate();
//
//    }
//
//    private void opciones() {
//        FormularioUtil.activarComponente(dcFechaInicio, true);
//        FormularioUtil.activarComponente(dcFechaFin, radFecha.isSelected() || radLote.isSelected());
//        spHoraInicio.setEnabled(radHora.isSelected() || radLote.isSelected());
//        spHoraFin.setEnabled(radHora.isSelected() || radLote.isSelected());
//
//    }
    private void busqueda() {
        System.out.println("BUSCAR");
        lblBusqueda.setBusy(true);
        paginaActual = 1;
        buscar();
        actualizarControlesNavegacion();
        lblBusqueda.setBusy(false);
    }

    private void busqueda(Permiso permiso) {
        System.out.println("BUSCAR");
        lblBusqueda.setBusy(true);
        paginaActual = 1;
        buscar(permiso);
        actualizarControlesNavegacion();
        lblBusqueda.setBusy(false);
    }
}
