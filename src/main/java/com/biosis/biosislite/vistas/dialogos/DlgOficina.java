/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.biosislite.vistas.dialogos;

import com.biosis.biosislite.controladores.DepartamentoControlador;
import com.biosis.biosislite.entidades.escalafon.Departamento;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import org.jdesktop.observablecollections.ObservableCollections;
import com.biosis.biosislite.vistas.renders.RenderArea;

/**
 *
 * @author RyuujiMD
 */
public class DlgOficina extends javax.swing.JDialog {

    /**
     * Creates new form DlgOficina
     *
     * @param padre
     */
    private Departamento departamentoSeleccionado;

    public DlgOficina(JInternalFrame padre) {
        super(JOptionPane.getFrameForComponent(padre), true);
        initComponents();
//        departamentoList = ObservableCollections.observableList(new ArrayList<Departamento>());
        bindeoSalvaje();
//        buscar();
        this.setLocationRelativeTo(padre);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlSeleccion = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        trAreas = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(606, 400));

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        pnlSeleccion.setBorder(javax.swing.BorderFactory.createTitledBorder("Selección de área o sede"));
        pnlSeleccion.setLayout(new java.awt.BorderLayout());

        trAreas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        trAreas.setRowHeight(30);
        trAreas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                trAreasMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(trAreas);

        pnlSeleccion.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        jButton1.setText("Seleccionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        pnlSeleccion.add(jPanel2, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 671, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trAreasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trAreasMouseReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_trAreasMouseReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) trAreas.getLastSelectedPathComponent();
        if (nodo != null) {
            Object elemento = nodo.getUserObject();
            if (elemento instanceof Departamento) {
                this.departamentoSeleccionado = (Departamento) elemento;
                this.dispose();
//            mostrar((Departamento)elemento);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlSeleccion;
    private javax.swing.JTree trAreas;
    // End of variables declaration//GEN-END:variables

//    private void seleccionar() {
//        int fila;
//        if((fila = tblTabla.getSelectedRow()) != -1){
//            departamentoSeleccionado = departamentoList.get(fila);
//            this.dispose();
//        }
//    }
//    private final List<Departamento> departamentoList;
//    private final DepartamentoControlador dc = DepartamentoControlador.getInstance();
//    private void buscar() {
//        String patron = txtOficina.getText();
//        departamentoList.clear();
//        departamentoList.addAll(dc.buscarXNombre(patron));
//        tblTabla.packAll();
//    }
    public Departamento getSeleccionado() {
        this.setVisible(true);
        return this.departamentoSeleccionado;
    }
    private TreeModel modeloDepartamento;
    private TreeCellRenderer renderDepartamento;
    private DepartamentoControlador depc = DepartamentoControlador.getInstance();

    private void bindeoSalvaje() {
        TreeNode nodoPrincipal = new DefaultMutableTreeNode("SEDES Y ÁREAS");
        modeloDepartamento = new DefaultTreeModel(nodoPrincipal);
        renderDepartamento = new RenderArea();
        trAreas.setModel(modeloDepartamento);

        trAreas.setCellRenderer(renderDepartamento);
        List<Departamento> departamentos = depc.buscarXJerarquia();
        System.out.println("DEPARTAMENTOS JERARQUIA: " + departamentos.size());
        llenarArbol((DefaultTreeModel) modeloDepartamento, departamentos, (DefaultMutableTreeNode) nodoPrincipal);

        for (int i = 0; i < trAreas.getRowCount(); i++) {
            trAreas.expandRow(i);
        }
//        actualizarArbol();
    }

    private void llenarArbol(DefaultTreeModel modelo, List listado, DefaultMutableTreeNode padre) {
        for (Object elemento : listado) {
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento);
            modelo.insertNodeInto(nodo, padre, padre.getChildCount());
            if (elemento instanceof Departamento) {
                List<Departamento> deps = ((Departamento) elemento).getDepartamentoList();
                if (!deps.isEmpty()) {
                    llenarArbol(modelo, deps, nodo);
                }
            }
        }
    }

    private void expandirTodo() {

    }
}
