/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.biosislite.vistas.dialogos;

import com.biosis.biosislite.controladores.AsignacionHorarioControlador;
import com.biosis.biosislite.controladores.EmpleadoControlador;
import com.biosis.biosislite.controladores.HorarioControlador;
import com.biosis.biosislite.controladores.PeriodoControlador;
import com.biosis.biosislite.controladores.SeccionHorarioControlador;
import com.biosis.biosislite.entidades.AsignacionHorario;
import com.biosis.biosislite.entidades.Horario;
import com.biosis.biosislite.entidades.Periodo;
import com.biosis.biosislite.entidades.educativo.Seccion;
import com.biosis.biosislite.entidades.educativo.SeccionHorario;
import com.biosis.biosislite.entidades.escalafon.Empleado;
import com.personal.utiles.FormularioUtil;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Aldo
 */
public class DlgAsignacionSeccionHorario extends javax.swing.JDialog {

    /**
     * Creates new form DlgAsignacionSeccionHorario
     */
    private List<Empleado> listaEmpleado;
    private List<Empleado> listaEmpleadoGuardar = new ArrayList<Empleado>();
    private SeccionHorario seccionHorario = new SeccionHorario();
    private Seccion seccion;
    private Horario horario;
    private int accion;
    //Controladores
    private EmpleadoControlador ec;
    private SeccionHorarioControlador shc;
    private PeriodoControlador pc;
    private AsignacionHorarioControlador ashc;
    
    public DlgAsignacionSeccionHorario(JInternalFrame parent,Seccion seccion, int accion) {
        super(JOptionPane.getFrameForComponent(parent), true);
        initComponents();
        inicializar();
        this.seccion = seccion;
        this.accion = accion;
        List<Periodo> periodos = pc.buscarTodosOrden();
        Periodo periodoS = periodos.get(0);
        
        this.listaEmpleado = ec.buscarXSeccionXPeriodo(seccion,periodos.get(0));
        System.out.println("Periodo: "+periodoS.getNombre()+" "+periodoS.getAnio());
        System.out.println("Seccion"+this.seccion.getNombre());
        System.out.println("Cantidad: "+this.listaEmpleado.size());
        this.listaEmpleado.stream().forEach((a) -> {
            System.out.println("Nombre alumno: "+a.getNombre()+" Dni: "+a.getNroDocumento());
        });
        this.setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlAsignacionSeccionHorario = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dcFechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        dcFechaFin = new com.toedter.calendar.JDateChooser();
        pnlBotones = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        cboHorario = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ASIGNACION HORARIO A SECCION");

        pnlAsignacionSeccionHorario.setBorder(javax.swing.BorderFactory.createTitledBorder("Asignar Horario"));
        java.awt.GridBagLayout pnlAsignacionSeccionHorarioLayout = new java.awt.GridBagLayout();
        pnlAsignacionSeccionHorarioLayout.columnWidths = new int[] {0, 8, 0, 8, 0, 8, 0};
        pnlAsignacionSeccionHorarioLayout.rowHeights = new int[] {0, 8, 0, 8, 0, 8, 0};
        pnlAsignacionSeccionHorario.setLayout(pnlAsignacionSeccionHorarioLayout);

        jLabel1.setText("Horario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlAsignacionSeccionHorario.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Fecha de inicio:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlAsignacionSeccionHorario.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlAsignacionSeccionHorario.add(dcFechaInicio, gridBagConstraints);

        jLabel3.setText("Fecha de fin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlAsignacionSeccionHorario.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlAsignacionSeccionHorario.add(dcFechaFin, gridBagConstraints);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        pnlBotones.add(btnGuardar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        pnlBotones.add(btnCancelar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        pnlAsignacionSeccionHorario.add(pnlBotones, gridBagConstraints);

        cboHorario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlAsignacionSeccionHorario.add(cboHorario, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAsignacionSeccionHorario, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAsignacionSeccionHorario, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        if(!hayErrores()){
            guardar();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cboHorario;
    private com.toedter.calendar.JDateChooser dcFechaFin;
    private com.toedter.calendar.JDateChooser dcFechaInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel pnlAsignacionSeccionHorario;
    private javax.swing.JPanel pnlBotones;
    // End of variables declaration//GEN-END:variables
    
    private HorarioControlador hc = new HorarioControlador();
    private void inicializar(){
        ec = new EmpleadoControlador();
        shc = new SeccionHorarioControlador();
        pc = new PeriodoControlador();
        ashc = new AsignacionHorarioControlador();
        cboHorario.setModel(new DefaultComboBoxModel(hc.buscarTodos().toArray()));
        cboHorario.setRenderer(new DefaultListCellRenderer(){

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if(value instanceof Horario){
                    value = ((Horario)value).getNombre();
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
            
        });
    }
    
    private boolean hayErrores(){
        //COMPROBAMOS LOS DISTINTOS TIPOS
        int errores = 0;
        Date fechaInicio = dcFechaInicio.getDate();

        String mensajeError = "";
        Date fechaFin = dcFechaFin.getDate();
        if (fechaInicio.compareTo(fechaFin) > 0) {
            errores++;
            mensajeError = ">La fecha de inicio debe ser menor que la fecha de fin\n";
        }
        Date fechaActual = new Date();
        List<SeccionHorario> seccionHorarioList = shc.buscarXFechas(this.seccion, fechaActual);
        if(seccionHorarioList.size()>0){
            errores++;
            mensajeError = ">La seccion ya cuenta con un horario en este año\n";
        }
        if (errores > 0) {
            JOptionPane.showMessageDialog(this, mensajeError, "Mensaje del sistema", JOptionPane.WARNING_MESSAGE);
        }
        return errores != 0;
    }
    
    private void guardar(){
        //Validamos que las alumnas no posean horarios
        validarHorarios(this.listaEmpleado);
        
        if(FormularioUtil.dialogoConfirmar(this, accion)){
            this.seccionHorario.setSeccion(this.seccion);
            this.seccionHorario.setFechaInicio(dcFechaInicio.getDate());
            this.seccionHorario.setFechaFin(dcFechaFin.getDate());
            this.seccionHorario.setHorario((Horario)cboHorario.getSelectedItem());
            shc.setSeleccionado(this.seccionHorario);
          
            System.out.println("Lista de alumnas: "+this.listaEmpleadoGuardar.size());
            for(Empleado alumna:this.listaEmpleadoGuardar){
                AsignacionHorario nuevaAsignacion = new AsignacionHorario();
                nuevaAsignacion.setPorGrupo(false);
                nuevaAsignacion.setEmpleado(alumna);
                nuevaAsignacion.setFechaInicio(dcFechaInicio.getDate());
                nuevaAsignacion.setFechaFin(dcFechaFin.getDate());
                nuevaAsignacion.setHorario((Horario)cboHorario.getSelectedItem());
                ashc.setSeleccionado(nuevaAsignacion);
                ashc.accion(this.accion);
            }
            if (shc.accion(accion)) {
                FormularioUtil.mensajeExito(this, accion);

                this.dispose();

            } else {
                FormularioUtil.mensajeError(this, accion);
            }
        }    
    }
    
    private void validarHorarios(List<Empleado> listaEmpleado){
        listaEmpleado.stream().forEach((e) -> {
            List<AsignacionHorario> asignaciones = ashc.buscarXEmpleado(e, dcFechaInicio.getDate(), dcFechaFin.getDate());
            if (asignaciones.size() == 0) {
                this.listaEmpleadoGuardar.add(e);
            }
        });
    }
}
